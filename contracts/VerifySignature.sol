// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract VerifySignature {
    /*
     * @notice Verifies if a hash was signed by a specific address
     * @param hash The hash of the data
     * @param signature The signature generated by signing the hash
     * @param signer The address that is claimed to be the signer
     * @return bool indicating whether the signature is valid and was made by the signer
     */
    function verify(bytes32 hash, bytes memory signature, address signer) public pure returns (bool) {
        // Ensure the signature length is correct
        if (signature.length != 65) {
            return false;
        }

        // Split the signature into its components (r, s, v)
        bytes32 r;
        bytes32 s;
        uint8 v;

        // ecrecover takes the signature parameters, and the first byte is the v value
        assembly {
            r := mload(add(signature, 0x20))
            s := mload(add(signature, 0x40))
            v := byte(0, mload(add(signature, 0x60)))
        }

        // Adjust the v value
        if (v < 27) {
            v += 27;
        }

        // If v isn't 27 or 28, return false
        if (v != 27 && v != 28) {
            return false;
        }

        // Prefix the hash as per Ethereum message signing standards
        bytes32 ethSignedMessageHash = keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));

        // Recover the signer from the signature
        address recoveredSigner = ecrecover(ethSignedMessageHash, v, r, s);

        // Compare the recovered signer to the provided signer
        return recoveredSigner == signer;
    }
}
